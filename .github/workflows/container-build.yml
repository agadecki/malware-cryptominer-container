name: Container build

on:
  workflow_dispatch:
    inputs:
      container_registry_push:
        description: "Should push the image to Container Registry"
        type: boolean
        required: true
        default: false
  push:
    tags:
      # For code tagging you can use 'v' prefix, but 'v' prefix should not be part of container tag
      - "v[0-9]+.[0-9]+.[0-9]+*"
  schedule:
    - cron: "0 0 1 * *"

env:
  DOCKERFILE_LOCATION: Dockerfile
  # Container image destination - with registry and without tags
  CONTAINER_IMAGE: quay.io/petr_ruzicka/malware-cryptominer-container
  CONTAINER_REGISTRY_USER: ${{ secrets.CONTAINER_REGISTRY_USER }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
  IMAGE_PRODUCT_ID: 12345
  IMAGE_LICENSES: Apache-2.0
  IMAGE_VENDOR: MyCompany
  IMAGE_AUTHORS: petr.ruzicka@gmail.com
  IMAGE_REPOSITORY_URL: https://quay.io/repository/petr_ruzicka/malware-cryptominer-container?tab=tags

jobs:
  container-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set GitHub variables
        id: variables
        env:
          DOCKERFILE_LOCATION: ${{ env.DOCKERFILE_LOCATION }}
          CONTAINER_IMAGE: ${{ env.CONTAINER_IMAGE }}
        run: |
          set -euxo pipefail
          echo "${CONTAINER_IMAGE}" | awk -F / '{print "CONTAINER_REGISTRY="$1}' | tee -a "${GITHUB_OUTPUT}"
          echo "CONTAINER_NAME=$(basename "${CONTAINER_IMAGE}")" | tee -a "${GITHUB_OUTPUT}"
          echo "DOCKER_BUILD_DIRECTORY=$(dirname "${DOCKERFILE_LOCATION}")" | tee -a "${GITHUB_OUTPUT}"
          BASE_IMAGE=$(awk '/^FROM/ {a=$2} END{print a}' "${DOCKERFILE_LOCATION}")
          docker pull --quiet "${BASE_IMAGE}"
          # Add 'docker.io' to base container images which are missing it
          echo "${BASE_IMAGE}" | grep -E '[^.]+\..+:' || BASE_IMAGE="docker.io/${BASE_IMAGE}"
          echo "BASE_IMAGE=${BASE_IMAGE}" | tee -a "${GITHUB_OUTPUT}"
          BASE_IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${BASE_IMAGE}" | cut -d @ -f 2)
          echo "BASE_IMAGE_DIGEST=${BASE_IMAGE_DIGEST}" | tee -a "${GITHUB_OUTPUT}"

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.CONTAINER_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,format=long
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }},event=tag
          labels: |
            # org.opencontainers.image.created - it is there by default
            org.opencontainers.image.authors=${{ env.IMAGE_AUTHORS }}
            # org.opencontainers.image.description - it is there by default (repository description)
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}/blob/${{ github.sha }}/README.md
            # org.opencontainers.image.revision - it is there by default
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.url - it is there by default
            # org.opencontainers.image.version - it is there by default
            org.opencontainers.image.vendor=${{ env.IMAGE_VENDOR }}
            org.opencontainers.image.licenses=${{ env.IMAGE_LICENSES }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            org.opencontainers.image.base.digest=${{ steps.variables.outputs.BASE_IMAGE_DIGEST }}
            org.opencontainers.image.base.name=${{ steps.variables.outputs.BASE_IMAGE }}
            com.mycompany.image.pipeline.url=${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}
            com.mycompany.image.pipeline.source=${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}/workflow
            com.mycompany.image.product_id=${{ env.IMAGE_PRODUCT_ID }}
            com.mycompany.image.repository.url=${{ env.IMAGE_REPOSITORY_URL }}
            com.mycompany.image.used_for=all
            quay.expires-after: 365d

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker build
        uses: docker/build-push-action@v3
        id: build-push-action
        with:
          file: ${{ env.DOCKERFILE_LOCATION }}
          context: ${{ steps.variables.outputs.DOCKER_BUILD_DIRECTORY }}
          load: true
          tags: ${{ steps.docker_meta.outputs.tags }}

      #########################
      # Trivy Scanner
      #########################

      - name: Trivy Scan Image - sarif
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: 1
          ignore-unfixed: true
          severity: CRITICAL

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Trivy Scan Image - table
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          exit-code: 1
          ignore-unfixed: true

      #########################
      # Anchore - Grype
      #########################

      - name: Grype Scan image - sarif
        id: anchore-scan
        uses: anchore/scan-action@v3
        continue-on-error: true
        with:
          severity-cutoff: critical
          image: ${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}

      - name: Upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.anchore-scan.outputs.sarif }}

      - name: Grype Scan image - table
        uses: anchore/scan-action@v3
        continue-on-error: true
        with:
          image: ${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          severity-cutoff: critical
          output-format: table

      ###############################################
      # Push container image to registry and sign it
      ###############################################

      - name: Login to ${{ steps.variables.outputs.CONTAINER_REGISTRY }}
        if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.variables.outputs.CONTAINER_REGISTRY }}
          username: ${{ env.CONTAINER_REGISTRY_USER }}
          password: ${{ env.CONTAINER_REGISTRY_PASSWORD }}

      - name: Push image to container registry
        if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
        uses: docker/build-push-action@v3
        id: docker_push
        with:
          file: ${{ env.DOCKERFILE_LOCATION }}
          context: ${{ steps.variables.outputs.DOCKER_BUILD_DIRECTORY }}
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Install Cosign
        if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
        uses: sigstore/cosign-installer@v2

      - name: Sign image with a key
        if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
        run: |
          echo "${{ steps.docker_meta.outputs.tags }}" | xargs --verbose -I {} cosign sign --key env://COSIGN_PRIVATE_KEY {}@${{ steps.docker_push.outputs.digest }}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Sign the images with GitHub OIDC Token
        if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
        run: |
          echo "${{ steps.docker_meta.outputs.tags }}" | xargs --verbose -I {} cosign sign {}@${{ steps.docker_push.outputs.digest }}
        env:
          TAGS: ${{ steps.docker_meta.outputs.tags }}
          COSIGN_EXPERIMENTAL: true

      - name: Create Release Notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: "${{ steps.docker_meta.outputs.version }}",
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: "${{ steps.docker_meta.outputs.version }}",
              });
            } catch (error) {
              core.setFailed(error.message);
            }
